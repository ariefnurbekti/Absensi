document.addEventListener(\'DOMContentLoaded\', () => {\n    const boardElement = document.getElementById(\'kanban-board\');\n\n    // --- 1. Load and Render Board ---\n    async function loadBoard() {\n        const response = await fetch(\'/api/board\');\n        const board = await response.json();\n        boardElement.innerHTML = \'\';\n        board.columns.forEach(col => {\n            const colEl = createColumnElement(col.id, col.title);\n            col.cards.forEach(card => {\n                const cardEl = createCardElement(card.id, card.text);\n                colEl.querySelector(\'.kanban-cards\').appendChild(cardEl);\n            });\n            boardElement.appendChild(colEl);\n        });\n        updateAllCardCounts();\n        initializeInteractivity();\n    }\n\n    // --- 2. Create DOM Elements ---\n    function createColumnElement(id, title) {\n        const el = document.createElement(\'div\');\n        el.className = \'kanban-column\';\n        el.dataset.columnId = id;\n        el.innerHTML = `\n            <header class=\"p-4 font-semibold text-lg text-slate-700 border-b border-slate-200 flex justify-between items-center\">\n                <span>${title}</span>\n                <span class=\"card-count text-sm text-slate-500 bg-slate-200 px-2 rounded-full\">0</span>\n            </header>\n            <div class=\"kanban-cards p-2\"></div>\n            <footer class=\"p-2\">\n                <button class=\"w-full text-left p-2 text-slate-500 hover:bg-slate-200 rounded-lg\">+ Add a card</button>\n            </footer>\n        `;\n        return el;\n    }\n\n    function createCardElement(id, text) {\n        const el = document.createElement(\'div\');\n        el.className = \'kanban-card\';\n        el.dataset.cardId = id;\n        \n        const textNode = document.createElement(\'span\');\n        textNode.textContent = text;\n        \n        const deleteBtn = document.createElement(\'span\');\n        deleteBtn.className = \'delete-card-btn\';\n        deleteBtn.innerHTML = \'<i class=\"fas fa-trash-alt fa-xs\"></i>\';\n        \n        el.appendChild(textNode);\n        el.appendChild(deleteBtn);\n        return el;\n    }\n\n    // --- 3. UI Interactivity ---\n    function initializeInteractivity() {\n        initializeDragAndDrop();\n        initializeAddCardButtons();\n        initializeCardEventListeners();\n    }\n\n    function updateCardCount(columnId) {\n        const col = boardElement.querySelector(`[data-column-id=\"${columnId}\"]`);\n        if (col) col.querySelector(\'.card-count\').textContent = col.querySelectorAll(\'.kanban-card\').length;\n    }\n\n    function updateAllCardCounts() {\n        boardElement.querySelectorAll(\'.kanban-column\').forEach(col => updateCardCount(col.dataset.columnId));\n    }\n\n    function initializeDragAndDrop() {\n        document.querySelectorAll(\'.kanban-cards\').forEach(col => {\n            new Sortable(col, {\n                group: \'kanban\', animation: 150, ghostClass: \'sortable-ghost\',\n                onEnd: async (e) => {\n                    updateCardCount(e.from.closest(\'.kanban-column\').dataset.columnId);\n                    updateCardCount(e.to.closest(\'.kanban-column\').dataset.columnId);\n                    await fetch(\`/api/cards/move\`, { // Corrected endpoint\n                        method: \'PUT\', headers: { \'Content-Type\': \'application/json\' },\n                        body: JSON.stringify({ cardId: e.item.dataset.cardId, newColumnId: e.to.closest(\'.kanban-column\').dataset.columnId, newIndex: e.newDraggableIndex })\n                    });\n                }\n            });\n        });\n    }\n\n    function initializeAddCardButtons() {\n        boardElement.querySelectorAll(\'.kanban-column footer button\').forEach(btn => {\n            btn.addEventListener(\'click\', () => {\n                const colEl = btn.closest(\'.kanban-column\');\n                showInputForm(colEl, async (text) => {\n                    const res = await fetch(\'/api/cards\', { \n                        method: \'POST\', headers: { \'Content-Type\': \'application/json\' },\n                        body: JSON.stringify({ columnId: colEl.dataset.columnId, text })\n                    });\n                    const newCard = await res.json();\n                    const cardEl = createCardElement(newCard.id, newCard.text);\n                    colEl.querySelector(\'.kanban-cards\').appendChild(cardEl);\n                    updateCardCount(colEl.dataset.columnId);\n                    initializeCardEventListeners(cardEl);\n                });\n            });\n        });\n    }\n    \n    function initializeCardEventListeners(target) {\n        const elements = target ? [target] : document.querySelectorAll(\'.kanban-card\');\n        elements.forEach(cardEl => {\n            // Click on card itself opens the detail modal\n            cardEl.addEventListener(\'click\', (e) => {\n                // Ensure the delete button click doesn\'t bubble up\n                if (e.target.closest(\'.delete-card-btn\')) return;\n                showCardDetailModal(cardEl.dataset.cardId);\n            });\n\n            // Click on delete button\n            const deleteBtn = cardEl.querySelector(\'.delete-card-btn\');\n            if (deleteBtn) {\n                deleteBtn.addEventListener(\'click\', async (e) => {\n                    e.stopPropagation(); // Prevent modal from opening\n                    const cardId = cardEl.dataset.cardId;\n                    if (confirm(\'Are you sure you want to delete this card?\')) {\n                        const res = await fetch(`/api/cards/${cardId}`, { method: \'DELETE\' });\n                        if (res.ok) {\n                            const parentColumn = cardEl.closest(\'.kanban-column\');\n                            cardEl.remove();\n                            updateCardCount(parentColumn.dataset.columnId);\n                        } else {\n                            alert(\'Failed to delete card.\');\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    // --- 4. Modals ---\n    function showInputForm(columnEl, onSubmit) { /* ... placeholder ... */ }\n    \n    async function showCardDetailModal(cardId) {\n        // ... (Modal logic remains the same as before)\n        const res = await fetch(`/api/cards/${cardId}`);\n        const card = await res.json();\n        const modal = document.createElement(\'div\');\n        modal.className = \'fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center\';\n        modal.innerHTML = `\n            <div class=\"bg-white rounded-lg shadow-xl w-full max-w-2xl p-6 relative\">\n                 <button class=\"close-btn absolute top-3 right-3 text-2xl text-slate-500 hover:text-slate-800\">&times;</button>\n                 <input type=\"text\" name=\"text\" value=\"${card.text}\" class=\"text-2xl font-bold w-full p-2 border-b-2 border-transparent focus:border-sky-500 outline-none mb-4\">\n                 <p class=\"text-slate-500 mb-2 font-semibold\">Description</p>\n                 <textarea name=\"description\" class=\"w-full h-40 p-2 border rounded-md bg-slate-50 focus:outline-none focus:ring-2 focus:ring-sky-500\">${card.description || \'\'}</textarea>\n                 <div class=\"mt-4 text-right\">\n                     <button class=\"save-btn bg-sky-600 text-white px-4 py-2 rounded-md hover:bg-sky-700\">Save</button>\n                 </div>\n             </div>\n        `;\n        document.body.appendChild(modal);\n        modal.querySelector(\'.close-btn\').addEventListener(\'click\', () => document.body.removeChild(modal));\n        modal.addEventListener(\'click\', (e) => { if (e.target === modal) document.body.removeChild(modal); });\n        modal.querySelector(\'.save-btn\').addEventListener(\'click\', async () => {\n            const newText = modal.querySelector(\'input[name=\"text\"]\').value;\n            const newDescription = modal.querySelector(\'textarea[name=\"description\"]\').value;\n            const updateRes = await fetch(`/api/cards/${cardId}`, {\n                method: \'PUT\', headers: { \'Content-Type\': \'application/json\' },\n                body: JSON.stringify({ text: newText, description: newDescription })\n            });\n            if (updateRes.ok) {\n                const cardElOnBoard = document.querySelector(`[data-card-id=\"${cardId}\"]`);\n                if(cardElOnBoard) cardElOnBoard.querySelector(\'span:first-child\').textContent = newText;\n                document.body.removeChild(modal);\n            }\n        });\n    }\n\n    // Initial Load\n    loadBoard();\n});\n